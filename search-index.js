var searchIndex = JSON.parse('{\
"radarbase":{"doc":"","t":"DNDENDDDAMAAMMMAMMMMAADNNELLLLLLLLLLLLLFLMLLLLLLLLFDLLLLLLMLLLNENLLLLLLLLLDRRRDLLLLLLLLLLLLLLMMMLMLLLLLLDLLLLLLLLLMLLLDDLLLLLMLLLLLLLLMMLLLLLL","n":["AccessGuard","Corrupted","Database","Error","Io","ReadOnlyTransaction","Table","WriteTransaction","binarytree","data","db","error","len","mmap_ref","offset","storage","storage","storage","storage","storage","table","transactions","BinarytreeBuilder","Internal","Leaf","Node","add","borrow","borrow","borrow_mut","borrow_mut","build","eq","fmt","from","from","get_max_key","into","into","lookup_in_raw","new","pairs","recursive_size","to_bytes","try_from","try_from","try_into","try_into","type_id","type_id","write_vec","Database","borrow","borrow_mut","from","into","open","open_table","storage","try_from","try_into","type_id","Corrupted","Error","Io","borrow","borrow_mut","fmt","from","from","into","try_from","try_into","type_id","AccessGuard","DATA_LEN","DATA_OFFSET","MAGICNUMBER","Storage","append","as_ref","borrow","borrow","borrow_mut","borrow_mut","from","from","fsync","get","initialize","into","into","len","len","mmap","mmap_ref","new","offset","try_from","try_from","try_into","try_into","type_id","type_id","Table","begin_write","borrow","borrow_mut","from","into","is_empty","len","new","read_transaction","storage","try_from","try_into","type_id","ReadOnlyTransaction","WriteTransaction","borrow","borrow","borrow_mut","borrow_mut","commit","data","from","from","get","insert","into","into","new","new","storage","storage","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"radarbase"],[22,"radarbase::binarytree"],[51,"radarbase::db"],[62,"radarbase::error"],[74,"radarbase::storage"],[104,"radarbase::table"],[118,"radarbase::transactions"]],"d":["","","","","","","","","This module provides an implementation of a binary tree.","","","","","","","","","","","","","","","","","","","","","","","Builds a balanced binary tree from the provided key-value …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the maximum key in the tree","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>(offset, len)</code> of the value for a queried key …","","","Returns the size of the node in bytes","Returns the index following the last written","","","","","","","Writes a vector to a byte array.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Opens the specified file as a radarbase database (radb).","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Append a new key &amp; value to the end of the file","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Flush the data to disk, and rebuild the binary tree","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the number of entries","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,14,0,0,14,0,0,0,0,21,0,0,19,19,19,0,13,16,21,22,0,0,0,2,2,0,1,1,2,1,2,1,2,2,1,2,2,1,2,0,1,1,2,2,1,2,1,2,1,2,0,0,13,13,13,13,13,13,13,13,13,13,14,0,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,18,19,18,19,18,19,18,19,18,18,18,18,19,18,19,18,19,18,19,18,19,18,19,18,19,0,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,21,22,21,22,21,21,21,22,22,21,21,22,21,22,21,22,21,22,21,22,21,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[1,2],[[2,2],3],[[2,4],5],[[]],[[]],[2,[[7,[6]]]],[[]],[[]],[8,9],[[],1],0,[2,8],[[2,8],8],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[8,8],0,[[]],[[]],[[]],[[]],[12,[[10,[13,14]]]],[[13,15],[[10,[16,14]]]],0,[[],10],[[],10],[[],11],0,0,0,[[]],[[]],[[14,4],5],[[]],[17,14],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,[18,[[10,[14]]]],[19],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[10,[14]]]],[18,[[10,[[9,[19]],14]]]],[18,[[10,[14]]]],[[]],[[]],[18,[[10,[8,14]]]],0,0,0,[20,18],0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[16,[[10,[21,14]]]],[[]],[[]],[[]],[[]],[16,[[10,[3,14]]]],[16,[[10,[8,14]]]],[18,[[10,[16,14]]]],[16,[[10,[22,14]]]],0,[[],10],[[],10],[[],11],0,0,[[]],[[]],[[]],[[]],[21,[[10,[14]]]],0,[[]],[[]],[22,[[10,[[9,[19]],14]]]],[21,[[10,[14]]]],[[]],[[]],[18,21],[18,22],0,0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[3,"BinarytreeBuilder"],[4,"Node"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Vec"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Path"],[3,"Database"],[4,"Error"],[15,"str"],[3,"Table"],[3,"Error"],[3,"Storage"],[3,"AccessGuard"],[3,"MmapMut"],[3,"WriteTransaction"],[3,"ReadOnlyTransaction"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
